{
    // Place your snippets for powershell here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    //     "prefix": "log",
    //     "body": [
    //         "console.log('$1');",
    //         "$2"
    //     ],
    //     "description": "Log output to console"
    // }
    "Help": {
        "prefix": "psHelp",
        "body": [
            "<#",
            ".SYNOPSIS",
            "    Synopsis",
            "",
            ".DESCRIPTION",
            "    Detail",
            "",
            ".PARAMETER ParamName",
            "    Description",
            "",
            ".INPUTS",
            "    This cmdlet has no inputs.",
            "",
            ".OUTPUTS",
            "    The cmdlet creates an array of one or more objects with the following properties",
            "",
            ".EXAMPLE",
            "    Example",
            "",
            "    returns data similar to the following example:",
            "",
            ".NOTES",
            "    $TM_FILENAME",
            "",
            "    Author: Viorel Ciucu | @viorelciucu | viorel.ciucu@gmail.com",
            "",
            "    Copyright (c) $CURRENT_YEAR Viorel Ciucu. All rights reserved.",
            "",
            "    The code herein is for demonstration purposes.",
            "    No warranty or guarantee is implied or expressly granted.",
            "",
            "    This module may not be reproduced in whole or in part without",
            "    the express written consent of the author.",
            "",
            ".LINK",
            "    https://github.com/cviorel/XXXXX/blob/master/Documentation/CMDLET-HERE.md",
            "",
            ".LINK",
            "    https://cviorel.com",
            "#>",
            ""
        ],
        "description": "Standard Help Template for a Function"
    },
    "PowerShell Comment Section": {
        "prefix": "psCommentSection",
        "body": [
            "#------------------------------------------------------------------------------",
            "# $0",
            "#------------------------------------------------------------------------------",
            ""
        ],
        "description": "Comment Section"
    },
    "Pester Test Basic": {
        "prefix": "psTestBasic",
        "body": [
            "<#------------------------------------------------------------------------------",
            "    $TM_FILENAME",
            "    Author: Viorel Ciucu | @viorelciucu | viorel.ciucu@gmail.com",
            "",
            "    Copyright (c) $CURRENT_YEAR Viorel Ciucu. All rights reserved.",
            "",
            "    No warranty or guarantee is implied or expressly granted.",
            "",
            "    This module may not be reproduced in whole or in part without",
            "    the express written consent of the author.",
            "------------------------------------------------------------------------------#>",
            "",
            "Describe \"$TM_FILENAME_BASE\" {",
            "",
            "    BeforeAll {",
            "        \\$module = 'MyModule'",
            "        \\$function = '$TM_FILENAME_BASE' # Remove .Tests from the name then remove this comment",
            "        \\$here = \\$PSScriptRoot",
            "    }",
            "",
            "    Context \"<module> <function> Tests\" {",
            "        It \"<function> returns value of x\" {",
            "            \\$(function) | Should -Be 'xyz'",
            "        }",
            "    } # Context \"<module> <function> Tests\"",
            "",
            "} # Describe Tests"
        ],
        "description": "Basic Pester Test"
    },
    "PowerShell Pester Match Test": {
        "prefix": "psTestMatch",
        "body": [
            "<#------------------------------------------------------------------------------",
            "    $TM_FILENAME",
            "    Author: Viorel Ciucu | @viorelciucu | viorel.ciucu@gmail.com",
            "",
            "    Copyright (c) $CURRENT_YEAR Viorel Ciucu. All rights reserved.",
            "",
            "    The code herein is for demonstration purposes.",
            "    No warranty or guarantee is implied or expressly granted.",
            "",
            "    This module may not be reproduced in whole or in part without",
            "    the express written consent of the author.",
            "--------------------------------------------------------------------------------",
            "",
            "    Common RegEx Syntax",
            "        [A-Z]  - Single uppercase letter in the range A to Z",
            "        [ABCD] - Single uppercase letter from the letters in A, B, C, or D",
            "        \\d     - Single digit",
            "        \\D     - Single character that is not a digit",
            "        {3}    - Quantifer after another syntax, for example \\d{3} is three numbers.",
            "            [A-Z]{2,4} reprents 2 to 4 uppercase letters",
            "            [A-Z]{2,} represents 2 or more uppercase letters",
            "        \\s     -  Whitespace character, such as spaces, tabs, line returns, [A-Z]\\s[A-Z]",
            "        +      - One or more of a value, [A-Z]+",
            "        ?      - Once or none, A?C matches ABC, ADC, etc.",
            "        .      - Any character except line break, a.c matches abc, acc, adc, etc.",
            "",
            "    Special Characters",
            "        \\t     - Tab character",
            "        \\r     - Carriage return character",
            "        \\n     - Line feed character",
            "        \\r\\n   - Line feed character",
            "",
            "    Characters that need to be escaped with a single backslash \\ before using them as a literal",
            "        . * + ? \\$ ^ / \\ [ ] { } ( )",
            "",
            "    For a more extensive guide to RegEx, please see:",
            "        https://www.rexegg.com/regex-quickstart.html",
            "------------------------------------------------------------------------------#>",
            "",
            "Describe \"$TM_FILENAME_BASE\" {",
            "",
            "    BeforeAll {",
            "        \\$module = 'MyModule'",
            "        \\$function = '$TM_FILENAME_BASE' # Remove .Tests from the name then remove this comment",
            "        \\$here = \\$PSScriptRoot",
            "    }",
            "",
            "    Context \"<module> <function> Tests\" {",
            "        It \"<function> matches a pattern of A0\" {",
            "            \\$(\\$function) | Should -Match '[A-Z]\\d'",
            "        }",
            "    } # Context \"<module> <function> Tests\"",
            "",
            "} # Describe Tests"
        ],
        "description": "Pester Match Test"
    },
    "Pester RegEx Match Patterns": {
        "prefix": "psTestPatterns",
        "body": [
            "    # RegEx Match Strings",
            "    \\$matchPostalCodeUS = '\\d{5}'                      # Matches 12345",
            "    \\$matchPostalCodePlus4US = '\\d{5}-\\d{4}'           # Matches 12345-6789",
            "    \\$matchPhoneUS = '\\d{3}-\\d{3}-\\d{4}'               # Matches 555-55-5555",
            "    \\$matchTaxpayerIdUS = '\\d{3}-\\d{2}-\\d{4}'          # Matches 111-22-3333",
            "",
            "    \\$matchPostalCodeUK = '[A-Z]{2}\\d[A-Z] \\d[A-Z]{2}' # Matches AA0A 1AA",
            "    \\$matchPhoneUK = '\\(\\d{3}\\) \\d{4} \\d{4}'           # Matches (111) 2222 3333",
            "    \\$matchTaxpayerIdMatch = '\\d{5} \\d{5}'             # Matches 12345 67890",
            "",
            "    \\$matchDateYYYYMMDD = '\\d{4}-\\d{2}-\\d{2}'          # Matches 2020-01-01",
            "    \\$matchTimeHHMMSS = '\\d{2}:\\d{2}:\\d{2}'            # Matches 23:59:59",
            "    \\$matchTimeHHMMSSAMPM = '\\d{2}:\\d{2}:\\d{2} [AP]M'  # Matches 12:59:59 PM",
            "",
        ],
        "description": "Pester Common RegEx Match Patterns"
    },
    "IfElse": {
        "prefix": "psIfElse",
        "body": [
            "if ( $0 ) {",
            "    ",
            "} else {",
            "    ",
            "}"
        ],
        "description": "My preferred if else formating"
    },
    "DataTable": {
        "prefix": "DataTable",
        "body": [
            "# Create DataTable Object",
            "$$table = New-Object System.Data.DataTable $$TableName",
            "\r# Create Columns",
            "$$col1 = New-Object System.Data.DataColumn NAME1,([string])",
            "$$col2 = New-Object System.Data.DataColumn NAME2,([decimal])",
            "\r#Add the Columns to the table",
            "$$table.columns.add($$col1)",
            "$$table.columns.add($$col2)",
            "\r# Create a new Row",
            "$$row = $$table.NewRow() ",
            "\r# Add values to new row",
            "$$row.Name1 = 'VALUE'",
            "$$row.Name2 = 'VALUE'",
            "\r#Add new row to table",
            "$$table.Rows.Add($$row)"
        ],
        "description": "Creates a Data Table Object"
    },
    "DateTimeWriteVerbose": {
        "prefix": "dtwv",
        "body": [
            "Write-Verbose \"[$(Get-Date -format G)] ${1:message}\"$0"
        ],
        "description": "Pre-pend datetime for Write-Verbose"
    },
    "Throw Terminating Error": {
        "prefix": "error-terminating",
        "body": [
            "\\$Exception     = New-Object ${1:System.ArgumentException} (\"${2:Invalid argument provided.}\")\r",
            "\\$ErrorCategory = [System.Management.Automation.ErrorCategory]::${3:InvalidArgument}\r",
            "# Exception, ErrorId as [string], Category, and TargetObject (e.g. the parameter that was invalid)\r",
            "\\$ErrorRecord   = New-Object System.Management.Automation.ErrorRecord(\\$Exception, '${4:InvalidArgument}', \\$ErrorCategory, ${5:\\$null})\r",
            "\\$PSCmdlet.ThrowTerminatingError(\\$ErrorRecord)"
        ],
        "description": "Throw a full terminating error."
    },
    "Max Length of Datatable": {
        "prefix": "Max Length of Datatable",
        "body": [
            "$$columns = ($$datatable | Get-Member -MemberType Property).Name",
            "foreach($$column in $$Columns) {",
            "\t$$max = 0",
            "\tforeach ($$a in $$datatable){",
            "\t\tif($$max -lt $$a.$$column.length){",
            "\t\t\t$$max = $$a.$$column.length",
            "\t\t}",
            "\t}",
            "\tWrite-Output \"$$column max length is $$max\"",
            "}"
        ],
        "description": "Takes a datatable object and iterates through it to get the max length of the string columns - useful for data loads"
    },
    "Parameter-Credential": {
        "prefix": "parameter-credential",
        "body": [
            "# Specifies the user account credentials to use when performing this task.\r",
            "[Parameter()]\r",
            "[ValidateNotNull()]\r",
            "[System.Management.Automation.PSCredential]\r",
            "[System.Management.Automation.Credential()]\r",
            "$$Credential${1: = [System.Management.Automation.PSCredential]::Empty}"
        ],
        "description": "Parameter declaration snippet for a Credential parameter."
    },
    "Pester for Mandatory Parameter": {
        "prefix": "mandatoryParamPester",
        "body": [
            "It \"${1:FunctionName} Should have a mandatory parameter ${2:ParameterName}\" {",
            "\t(Get-Command ${1:FunctionName}).Parameters['${2:ParameterName}'].Attributes.Mandatory | Should -BeTrue",
            "}"
        ],
        "description": "Pester Test for Parameter"
    },
    "Pester for Parameter": {
        "prefix": "Param Pester",
        "body": [
            "It \"${1:FunctionName} Should have a parameter ${2:ParameterName}\" {",
            "\t(Get-Command ${1:FunctionName}).Parameters['${2:ParameterName}'].Count | Should -Be 1",
            "}"
        ],
        "description": "Pester Test for Parameter"
    },
    "ex-Send-MailMessage": {
        "prefix": "ex-Send-MailMessage",
        "body": [
            "$$Params = @{",
            "    'SmtpServer'  = 'smtp.mycompany.com'",
            "    'Port'        = 25",
            "    'Priority'    = 'Normal'",
            "    'From'        = 'sender@mycompany.com'",
            "    'To'          = 'mainrecipient@mycompany.com'",
            "    'Cc'          = 'copyrecipient@mycompany.com'",
            "    'Bcc'         = 'hiddenrecipient@mycompany.com'",
            "    'Subject'     = 'Mail title'",
            "    'Body'        = 'This is the content of my mail'",
            "    'BodyAsHtml'  = $$false",
            "    'Attachments' = 'c:\\MyFile.txt'",
            "}",
            "Send-MailMessage @Params"
        ],
        "description": "Send a mail message"
    },
    "Stream-Writer": {
        "prefix": "Stream Writer",
        "body": [
            "## Create a file and write to it",
            "$$file = 'c:\\temp\\file.txt'",
            "$$sw = New-Object System.IO.StreamWriter($$file)",
            "$$sw.WriteLine('Hello World')",
            "$$sw.Close()"
        ],
        "description": "Create a file and write to it"
    },
    "StreamReader1": {
        "prefix": "Stream Reader v1",
        "body": [
            "## Read a file",
            "$$file = 'c:\\temp\\file.txt'",
            "$$sr = New-Object System.IO.StreamReader($$file)",
            "while ($$sr.Peek() -ge 0) {",
            "    $$line = $$sr.ReadLine()",
            "    Write-Host $$line",
            "}",
            "$$sr.Close()"
        ],
        "description": "Read a file"
    },
    "StreamReader2": {
        "prefix": "Stream Reader v2",
        "body": [
            "$$file = ${1:'c:\\temp\\file.txt'}",
            "$$results = @{}",
            "\r# Setup a streamreader to process the file ",
            "$$sr = New-Object System.IO.StreamReader -ArgumentList $$file",
            "\rwhile ($$true ) {",
            "\t# Read this line ",
            "\t$$line = $$sr.ReadLine() ",
            "\tif ($$line -eq $$null) {",
            "\t\t# If the line was $$null, we're at the end of the file, let's break",
            "\t\t$$sr.close() ",
            "\t\tbreak",
            "\t}",
            "\r\t# Do something with the line here",
            "\tif ($$line.StartsWith('\\[Re')) {",
            "\t\t$$results[$$line] += 1",
            "\t}",
            "}",
            "\rreturn $$results",
        ],
        "description": "Use this to quickly have a working StreamReader"
    },
}
